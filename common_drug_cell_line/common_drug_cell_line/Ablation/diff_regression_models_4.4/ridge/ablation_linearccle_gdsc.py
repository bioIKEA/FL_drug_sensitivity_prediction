# -*- coding: utf-8 -*-
"""Ablation_linearCCLE_GDSC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aeC5aEYfa-fYlHXuX-cId8azmoZnIu4t
"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np


data_path= '/Users/kritibbhattarai/Downloads/trisha-kritib/data/sensitivity_data/new_aug2/'

CCLE=pd.read_csv(data_path+'CCLE_paired_common.csv', index_col=0)
GDSC=pd.read_csv(data_path+'GDSC_paired_common.csv', index_col=0)

ccle_x = CCLE.iloc[:, 0:-1]
ccle_y = CCLE.iloc[:, -1]

GDSC = GDSC.reset_index()
GDSC = GDSC.drop(columns='index')

gdsc_x = GDSC.iloc[:, 0:-1]
gdsc_y = GDSC.iloc[:, -1]

gdsc_x.iloc[0:2, 0:-21]

gdsc_x = gdsc_x.iloc[:, 0:-21]
ccle_x = ccle_x.iloc[:, 0:-21]

gdsc_x.iloc[:, :] = StandardScaler().fit_transform(gdsc_x.iloc[:, :])
ccle_x.iloc[:, :] = StandardScaler().fit_transform(ccle_x.iloc[:, :])

from sklearn.model_selection import train_test_split

gdsc_X_train, gdsc_X_test, gdsc_y_train, gdsc_y_test = train_test_split(gdsc_x, gdsc_y, test_size = 0.30, random_state = 42) 
ccle_X_train, ccle_X_test, ccle_y_train, ccle_y_test = train_test_split(ccle_x, ccle_y,test_size = 0.30, random_state = 42)

from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import plotly.express as px
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import KFold


maes_our=[]
mses_our=[]
r2s_our=[]
kf = KFold(n_splits=10, shuffle = True, random_state= 1)


i=1
for train_index, test_index in kf.split(ccle_x,ccle_y):
    # Create linear regression object
    # change to RandomForestRegressor() while needed 
    m1 = linear_model.Ridge()#RandomForestRegressor(max_depth=4)
    m2=  linear_model.Ridge()#RandomForestRegressor(max_depth=4)


    ccle_X_train=ccle_x.iloc[train_index,:]
    ccle_X_test=ccle_x.iloc[test_index,:]


    ccle_y_train=ccle_y[train_index]
    ccle_y_test=ccle_y[test_index]


    gdsc_X_train=gdsc_x.iloc[train_index,:]
    gdsc_X_test=gdsc_x.iloc[test_index,:]


    gdsc_y_train=gdsc_y[train_index]
    gdsc_y_test=gdsc_y[test_index]



    # in-study results: CCLE
    m1.fit(ccle_X_train, ccle_y_train)

    # Make predictions using the testing set
    ccle_y_pred = m1.predict(ccle_X_test)


    # The mean squared error
    print("Mean squared error: %.2f" % mean_squared_error(ccle_y_test, ccle_y_pred))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(ccle_y_test, ccle_y_pred))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(ccle_y_test, ccle_y_pred))

    #mixed study results trained on CCLE (70%)

    mixed_x_test = pd.concat([ccle_X_test, gdsc_X_test], ignore_index=True)
    mixed_y_test = pd.concat([ccle_y_test, gdsc_y_test], ignore_index=True)

    mixed_y_pred_m1 = m1.predict(mixed_x_test)

    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, mixed_y_pred_m1))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, mixed_y_pred_m1))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, mixed_y_pred_m1))

    #trained on gdsc 70% data , tested on 30% gdsc

    m2.fit(gdsc_X_train, gdsc_y_train)

    # Make predictions using the testing set
    gdsc_y_pred = m2.predict(gdsc_X_test)

    # The coefficients
    #print("Coefficients: \n", regr.coef_)
    # The mean squared error
    print("Mean squared error: %.2f" % mean_squared_error(gdsc_y_test, gdsc_y_pred))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(gdsc_y_test, gdsc_y_pred))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(gdsc_y_test, gdsc_y_pred))

    #mixed study results trained on gdsc (70%)

    mixed_y_pred_m2 = m2.predict(mixed_x_test)

    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, mixed_y_pred_m2))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, mixed_y_pred_m2))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, mixed_y_pred_m2))

    #mixed model m5
    #train on mixed dataset and test on mixed dataset

    m5=  linear_model.Ridge()

    mixed_x_train = pd.concat([ccle_X_train, gdsc_X_train], ignore_index=True)
    mixed_y_train = pd.concat([ccle_y_train, gdsc_y_train], ignore_index=True)

    m5.fit(mixed_x_train, mixed_y_train)

    #make predictions on the combined test data

    mixed_y_pred_m5 = m5.predict(mixed_x_test)   

    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, mixed_y_pred_m5))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, mixed_y_pred_m5))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, mixed_y_pred_m5))

    ccle_y_train_pred = m1.predict(ccle_X_train)
    gdsc_y_train_pred = m2.predict(gdsc_X_train)

    """best that can be done on training sets"""

    print("Mean squared error: %.2f" % mean_squared_error(gdsc_y_train, gdsc_y_train_pred))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(gdsc_y_train, gdsc_y_train_pred))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(gdsc_y_train, gdsc_y_train_pred))

    print("Mean squared error: %.2f" % mean_squared_error(ccle_y_train, ccle_y_train_pred))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(ccle_y_train, ccle_y_train_pred))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(ccle_y_train, ccle_y_train_pred))

    """WA method"""

    avg_y_pred = (ccle_y_pred + gdsc_y_pred)/2

    avg_y_pred = pd.Series(avg_y_pred)

    avg_y_pred_stacked = pd.concat([avg_y_pred, avg_y_pred], ignore_index=True)

    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, avg_y_pred_stacked))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, avg_y_pred_stacked))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, avg_y_pred_stacked))

    """do a linear regression on the training scores"""

    m4 = linear_model.LinearRegression()

    m4.fit(gdsc_y_train_pred.reshape(-1, 1), ccle_y_train_pred.reshape(-1,1))

    # Make predictions using the testing set
    ccle_y_pred_m4 = m4.predict(gdsc_y_pred.reshape(-1,1))

    #avg ccle values predicted by m4 + gdsc input y values  to m4 
    gdsc = (ccle_y_pred_m4 + gdsc_y_pred.reshape(-1,1))/2

    #print(gdsc)
    print("Mean squared error: %.2f" % mean_squared_error(gdsc_y_test, gdsc))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(gdsc_y_test, gdsc))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(gdsc_y_test, gdsc))

    m3 =linear_model.LinearRegression()

    m3.fit(ccle_y_train_pred.reshape(-1, 1), gdsc_y_train_pred.reshape(-1,1))

    # Make predictions using the testing set
    gdsc_y_pred_m3 = m3.predict(ccle_y_pred.reshape(-1,1))

    ccle = (gdsc_y_pred_m3 + ccle_y_pred.reshape(-1,1))/2
    print("Mean squared error: %.2f" % mean_squared_error(ccle_y_test, ccle))

    #mean absolute error
    print("Mean absolute error: %.2f" % mean_absolute_error(ccle_y_test, ccle))

    # The coefficient of determination: 1 is perfect prediction
    print("Coefficient of determination: %.2f" % r2_score(ccle_y_test, ccle))

    ccle = pd.Series(ccle.squeeze())
    gdsc =pd.Series(gdsc.squeeze())

    concated = pd.concat([ccle, gdsc], ignore_index=True)

    #test on mixed data 
    print("Results for Fold: ", i)
    print("-----------------------------------------------------------------------")
    i=i+1

    mses_our.append(mean_squared_error(mixed_y_test, concated))
    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, concated))
    
    #mean absolute error
    maes_our.append(mean_absolute_error(mixed_y_test, concated))
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, concated))

    # The coefficient of determination: 1 is perfect prediction
    r2s_our.append(r2_score(mixed_y_test, concated))
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, concated))

    print("-----------------------------------------------------------------------")



with open("results/ccle_gdsc_ridge.txt", "a") as output:
    output.write("ccle_gdsc_our_method_mae_ridge="+str(maes_our)+"\n")
    output.write("ccle_gdsc_our_method_mse_ridge="+str(mses_our)+"\n")
    output.write("ccle_gdsc_our_method_r2_ridge="+str(r2s_our)+"\n")
