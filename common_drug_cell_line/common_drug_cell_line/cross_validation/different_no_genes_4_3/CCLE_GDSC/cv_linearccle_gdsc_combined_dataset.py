# -*- coding: utf-8 -*-
"""CV_linearCCLE_GDSC.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17G5ZhI6J2GmB1HF94VyTaU7T4hU3l_aR
"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data_path= '/Users/kritibbhattarai/Downloads/trisha-kritib/data/kritib-data/'

out_path = '/Users/kritibbhattarai/Downloads/trisha-kritib/code/new_pipeline/common_drug_cell_line/results_kritib/'

# C and C' 
list_of_CCLE_files=['CCLE_paired_common_with_gdsc_50.csv','CCLE_paired_common_with_gdsc_100.csv','CCLE_paired_common_with_gdsc_200.csv','CCLE_paired_common_with_gdsc_500.csv','CCLE_paired_common_with_gdsc_902.csv']
list_of_GDSC_files=['GDSC_paired_common_with_ccle_50.csv','GDSC_paired_common_with_ccle_100.csv','GDSC_paired_common_with_ccle_200.csv','GDSC_paired_common_with_ccle_500.csv','GDSC_paired_common_with_ccle_902.csv']

combined_dataset_mae=[]
combined_dataset_mse=[]
combined_dataset_r2=[]

for counter in range(len(list_of_CCLE_files)):
    CCLE=pd.read_csv(data_path+list_of_CCLE_files[counter], index_col=0)
    GDSC=pd.read_csv(data_path+list_of_GDSC_files[counter], index_col=0)
    CCLE=CCLE.reset_index(drop=True)
    CDSC=GDSC.reset_index(drop=True)

    ccle_x = CCLE.iloc[:, 0:-1]
    ccle_y = CCLE.iloc[:, -1]

    GDSC = GDSC.reset_index()
    GDSC = GDSC.drop(columns='index')

    gdsc_x = GDSC.iloc[:, 0:-1]
    gdsc_y = GDSC.iloc[:, -1]

    gdsc_x.iloc[0:2, 0:-21]

    gdsc_x.iloc[:, 0:-21] = StandardScaler().fit_transform(gdsc_x.iloc[:, 0:-21])
    ccle_x.iloc[:, 0:-21] = StandardScaler().fit_transform(ccle_x.iloc[:, 0:-21])

    from sklearn.model_selection import train_test_split

    gdsc_X_train, gdsc_X_test, gdsc_y_train, gdsc_y_test = train_test_split(gdsc_x, gdsc_y, test_size = 0.30, random_state = 42) 
    ccle_X_train, ccle_X_test, ccle_y_train, ccle_y_test = train_test_split(ccle_x, ccle_y,test_size = 0.30, random_state = 42)


    from numpy import mean
    from numpy import std
    from sklearn.datasets import make_classification
    from sklearn.model_selection import KFold
    from sklearn.model_selection import cross_val_score
    from sklearn import datasets, linear_model
    from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
    import plotly.express as px
    import plotly.graph_objects as go
    from sklearn.ensemble import RandomForestRegressor


    """Combined dataset CV"""

    maes_cd=[]
    mses_cd=[]
    r2s_cd=[]
    kf = KFold(n_splits=10, shuffle = True, random_state= 1)


    i = 1            
    for train_index, test_index in kf.split(ccle_x,ccle_y):
        #model = MLP()

        #fit ccle data to m1
        ccle_x_train= ccle_x.iloc[train_index, :]
        ccle_x_test= ccle_x.iloc[test_index, :]


        ccle_Y_train = ccle_y[train_index]
        ccle_Y_test = ccle_y[test_index]




        #fit gdsc data to m2
        gdsc_x_train= gdsc_x.iloc[train_index, :]
        gdsc_x_test= gdsc_x.iloc[test_index, :]


        gdsc_Y_train = gdsc_y[train_index]
        gdsc_Y_test = gdsc_y[test_index]



        m5=  linear_model.Ridge()

        #need this for evaluation
        mixed_x_test = pd.concat([ccle_x_test, gdsc_x_test], ignore_index=True)
        mixed_y_test = pd.concat([ccle_Y_test, gdsc_Y_test], ignore_index=True)

        mixed_x_train = pd.concat([ccle_x_train, gdsc_x_train], ignore_index=True)
        mixed_y_train = pd.concat([ccle_Y_train, gdsc_Y_train], ignore_index=True)

        m5.fit(mixed_x_train, mixed_y_train)

        #make predictions on the combined test data

        mixed_y_pred_m5 = m5.predict(mixed_x_test)

        #test on mixed data 
        print("Results for Fold: ", i)
        print("-----------------------------------------------------------------------")
        i=i+1

        #mean squared loss
        mses_cd.append(mean_squared_error(mixed_y_test,  mixed_y_pred_m5))
        print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, mixed_y_pred_m5))
        
        #mean absolute error
        maes_cd.append(mean_absolute_error(mixed_y_test,  mixed_y_pred_m5))
        print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test,  mixed_y_pred_m5))

        # The coefficient of determination: 1 is perfect prediction
        r2s_cd.append(r2_score(mixed_y_test, mixed_y_pred_m5))
        print("Coefficient of determination: %.2f" % r2_score(mixed_y_test,  mixed_y_pred_m5))


        print("-----------------------------------------------------------------------")
    combined_dataset_mae.append(maes_cd)
    combined_dataset_mse.append(mses_cd)
    combined_dataset_r2.append(r2s_cd)
with open("results/combined_dataset.txt", "a") as output:
    output.write("combined_dataset_mae="+str(combined_dataset_mae)+"\n")
    output.write("combined_dataset_mse="+str(combined_dataset_mse)+"\n")
    output.write("combined_dataset_r2="+str(combined_dataset_r2)+"\n")

'''

"""Plots"""

plt.boxplot([ maes_our, maes_cd,  maes_sb_gdsc, maes_wa, maes_ma])
plt.title("Mean Absolute Error")
plt.xticks([1, 2, 3, 4, 5], ['Our method', 'Combining datasets', 'Selecting best', 'Result averaging', 'Model averaging'])
plt.xticks(rotation = 90)
plt.savefig(out_path+'mean_absolute_error_boxplots_cv.png', dpi=300, bbox_inches= 'tight')
plt.show()

plt.boxplot([mses_our, mses_cd,  mses_sb_gdsc, mses_wa, mses_ma])
plt.title("Mean Squared Error")
plt.xticks([1, 2, 3, 4, 5], ['Our method', 'Combining datasets', 'Selecting best', 'Result averaging', 'Model averaging'])
plt.xticks(rotation = 90)
plt.savefig(out_path+'mean_squared_error_boxplots_cv.png', dpi=300, bbox_inches= 'tight')
plt.show()

plt.boxplot([r2s_our, r2s_cd,  r2s_sb_gdsc, r2s_wa, r2s_ma])
plt.title("Coefficient of determination")
plt.xticks([1, 2, 3, 4, 5], ['Our method', 'Combining datasets', 'Selecting best', 'Result averaging', 'Model averaging'])
plt.xticks(rotation = 90)
plt.savefig(out_path+'r2_boxplots_cv.png', dpi=300, bbox_inches= 'tight')
plt.show()

"""For SB, ccle is worse. So, we keep gdsc."""


'''
