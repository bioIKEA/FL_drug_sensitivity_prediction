# -*- coding: utf-8 -*-
"""Nonoverlap_overlap_CV_linearCCLE_GDSC_all_features.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13kQ4TO6lPcKioe9dS5UWltpKA2LcVH9E
"""

from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


data_path= '/Users/kritibbhattarai/Downloads/trisha-kritib/data/sensitivity_data/CCLE_GDSC_A_B_C_Cprime/'

# A, B, C and C' 

CCLE_A=pd.read_csv(data_path+'CCLE_A.csv')
CCLE_C = pd.read_csv(data_path+'CCLE_C.csv')
GDSC_B = pd.read_csv(data_path+'GDSC_B.csv')
GDSC_C=pd.read_csv(data_path+'GDSC_C_prime.csv')

print(CCLE_A.shape, CCLE_C.shape,  GDSC_B.shape, GDSC_C.shape)

percentage_gdsc=int(0.5*len(GDSC_B))
percentage_ccle=int(0.5*len(CCLE_A))
CCLE_A = CCLE_A.iloc[0: percentage_ccle, :]
GDSC_B = GDSC_B.iloc[0: percentage_gdsc, :]

# CCLE_C = CCLE_C.iloc[0: len(CCLE_C), :]
# GDSC_C = GDSC_C.iloc[0: len(GDSC_C), :]

#combine C and A
CCLE = pd.concat([CCLE_C, CCLE_A],ignore_index=True)

GDSC = pd.concat([GDSC_C, GDSC_B],ignore_index=True)

CCLE.shape

CCLE = CCLE.set_index(['cell line', 'compound' ])
GDSC = GDSC.set_index(['cell line', 'compound' ])

ccle_x = CCLE.iloc[:, 0:-1]
ccle_y = CCLE.iloc[:, -1]

gdsc_x = GDSC.iloc[:, 0:-1]
gdsc_y = GDSC.iloc[:, -1]

#last 21 columns are tissue types. one-hot encoding
gdsc_x.iloc[0:2, 0:-21]

gdsc_x.iloc[:, 0:-21] = StandardScaler().fit_transform(gdsc_x.iloc[:, 0:-21])
ccle_x.iloc[:, 0:-21] = StandardScaler().fit_transform(ccle_x.iloc[:, 0:-21])

from sklearn.model_selection import train_test_split

gdsc_X_train, gdsc_X_test, gdsc_y_train, gdsc_y_test = train_test_split(gdsc_x, gdsc_y, test_size = 0.30, random_state = 42) 
ccle_X_train, ccle_X_test, ccle_y_train, ccle_y_test = train_test_split(ccle_x, ccle_y,test_size = 0.30, random_state = 42)

"""Our method cv"""

from numpy import mean
from numpy import std
from sklearn.datasets import make_classification
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import plotly.express as px
import plotly.graph_objects as go
from sklearn.ensemble import RandomForestRegressor


maes_our=[]
mses_our=[]
r2s_our=[]
kf = KFold(n_splits=10, shuffle = True, random_state= 1)


i = 1            
for train_index, test_index in kf.split(ccle_x,ccle_y):
    print(train_index)
    #model = MLP()

    #fit ccle data to m1
    ccle_x_train= ccle_x.iloc[train_index, :]
    ccle_x_test= ccle_x.iloc[test_index, :]


    ccle_Y_train = ccle_y[train_index]
    ccle_Y_test = ccle_y[test_index]

    m1 = linear_model.Ridge()
    m1.fit(ccle_x_train, ccle_Y_train)

    # Make predictions using the testing set
    ccle_y_pred = m1.predict(ccle_x_test)

    #fit gdsc data to m2
    gdsc_x_train= gdsc_x.iloc[train_index, :]
    gdsc_x_test= gdsc_x.iloc[test_index, :]


    gdsc_Y_train = gdsc_y[train_index]
    gdsc_Y_test = gdsc_y[test_index]

    m2=  linear_model.Ridge()
    m2.fit(gdsc_x_train, gdsc_Y_train)

    # Make predictions using the testing set
    gdsc_y_pred = m2.predict(gdsc_x_test)


    #need this for evaluation
    mixed_x_test = pd.concat([ccle_x_test, gdsc_x_test], ignore_index=True)
    mixed_y_test = pd.concat([ccle_Y_test, gdsc_Y_test], ignore_index=True)

    # do inner join to find common cell lines and drugs and align those side by side from both datasets
    merge_common = pd.merge(ccle_x_train, gdsc_x_train, how = 'inner', left_index=True, right_index = True)

    #print(merge_common.head())
    # split the data into half vertically to get corresponding CCLE and GDSC counterparts 
    ccle_x_train_common = merge_common.iloc[:,0:1223]
    gdsc_x_train_common = merge_common.iloc[:, 1223: ]


    #rename the columns
    ccle_x_train_common.columns = range(1223)
    gdsc_x_train_common.columns = range(1223)

    #rename the columns to string
    ccle_x_train_common.columns = ccle_x_train_common.columns.map(str)
    gdsc_x_train_common.columns = gdsc_x_train_common.columns.map(str)

    #predictions on training sets. m1 to predict CCLE and m2 to predict GDSC
    ccle_y_train_pred = m1.predict(ccle_x_train_common)
    gdsc_y_train_pred = m2.predict(gdsc_x_train_common)

    m4 = linear_model.LinearRegression()
    #for m4, gdsc is the x and ccle is the y, reverse for m3
    m4.fit(gdsc_y_train_pred.reshape(-1, 1), ccle_y_train_pred.reshape(-1,1))

    # Make predictions using the testing set
    ccle_y_pred_m4 = m4.predict(gdsc_y_pred.reshape(-1,1))

    #avg ccle values predicted by m4 + gdsc input y values  to m4 
    gdsc = (ccle_y_pred_m4 + gdsc_y_pred.reshape(-1,1))/2


    m3 =linear_model.LinearRegression()
    #for m3, gdsc is the y and ccle is the x, reverse for m4
    m3.fit(ccle_y_train_pred.reshape(-1, 1), gdsc_y_train_pred.reshape(-1,1))

    # Make predictions using the testing set
    gdsc_y_pred_m3 = m3.predict(ccle_y_pred.reshape(-1,1))

    ccle = (gdsc_y_pred_m3 + ccle_y_pred.reshape(-1,1))/2


    #use squeeze to make it one dimensional
    ccle = pd.Series(ccle.squeeze())
    gdsc =pd.Series(gdsc.squeeze())

    #concat for comparing with mixed_y_test
    concated = pd.concat([ccle, gdsc], ignore_index=True)

    #test on mixed data 
    print("Results for Fold: ", i)
    print("-----------------------------------------------------------------------")
    i=i+1

    #mean squared loss
    mses_our.append(mean_squared_error(mixed_y_test, concated))
    print("Mean squared error: %.2f" % mean_squared_error(mixed_y_test, concated))
    
    #mean absolute error
    maes_our.append(mean_absolute_error(mixed_y_test, concated))
    print("Mean absolute error: %.2f" % mean_absolute_error(mixed_y_test, concated))

    # The coefficient of determination: 1 is perfect prediction
    r2s_our.append(r2_score(mixed_y_test, concated))
    print("Coefficient of determination: %.2f" % r2_score(mixed_y_test, concated))

    print("-----------------------------------------------------------------------")


with open("results/ccle_50_gdsc_50.txt", "a") as output:
    output.write("ccle_gdsc_our_method_mae="+str(maes_our)+"\n")
    output.write("ccle_gdsc_our_method_mse="+str(mses_our)+"\n")
    output.write("ccle_gdsc_our_method_r2="+str(r2s_our)+"\n")
