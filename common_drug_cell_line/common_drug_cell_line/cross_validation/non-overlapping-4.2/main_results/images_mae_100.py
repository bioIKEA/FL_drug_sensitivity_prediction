# Figure 4
##CCLE-GDSC
CCLE_100_gdsc=[]
GDSC_100_ccle=[]

##GDSC-gCSI
GDSC_100_gcsi=[]
gCSI_100_gdsc=[]


##CCLE-gCSI
CCLE_100_gcsi=[]
gCSI_100_ccle=[]
import numpy as np

#CCLE-GDSC
##ccle_100_gdsc
ccle_100_gdsc_100=[0.0809074015543588, 0.08060484408114997, 0.07950210615643735, 0.08073232536414603, 0.07808079303546898, 0.078640769939954, 0.0786593889715657, 0.08404085303344207, 0.08154504371648628, 0.07944970445864312]
ccle_100_gdsc_70=[0.08090746300460695, 0.08060485628578157, 0.07950211238375719, 0.08073234123020635, 0.07808079214266068, 0.07864078141144736, 0.07865939169688146, 0.08404082855025095, 0.08154505413122334, 0.07944970927543742]

ccle_100_gdsc_50=[0.08090752250543877, 0.08060485961481582, 0.07950211113154725, 0.08073233821923777, 0.07808078550608118, 0.07864077993928976, 0.07865938667338293, 0.08404076380840306, 0.08154505879751646, 0.07944970854019957]

CCLE_100_gdsc.append(ccle_100_gdsc_100)
CCLE_100_gdsc.append(ccle_100_gdsc_70)
CCLE_100_gdsc.append(ccle_100_gdsc_50)


##gdsc_100_ccle
gdsc_100_ccle_100=[0.0809074015543588, 0.08060484408114997, 0.07950210615643735, 0.08073232536414603, 0.07808079303546898, 0.078640769939954, 0.0786593889715657, 0.08404085303344207, 0.08154504371648628, 0.07944970445864312]

gdsc_100_ccle_70=[0.07918005141077443, 0.08032592922892444, 0.07983854847239319, 0.07544087157053081, 0.08116031040470228, 0.07907410393533201, 0.07894761501840324, 0.08026867107970836, 0.07889980670310884, 0.07900467403660631]

gdsc_100_ccle_50=[0.07297587822929011, 0.06939402118604664, 0.07224217822454662, 0.0782011088233088, 0.07492288943926569, 0.07395897851041376, 0.07701384837461892, 0.0760220171588619, 0.07352932145677414, 0.07299051337434366]

GDSC_100_ccle.append(gdsc_100_ccle_100)
GDSC_100_ccle.append(gdsc_100_ccle_70)
GDSC_100_ccle.append(gdsc_100_ccle_50)

#GDSC-gCSI

##gdsc_100_gcsi
gdsc_100_gcsi_100=[0.07422984312659701, 0.07781167184036335, 0.07344452352241902, 0.07569255758520366, 0.07282042899428959, 0.07577278617354004, 0.07418072520647431, 0.07448581294071474, 0.07436118095289632, 0.07353982494341302]

gdsc_100_gcsi_70=[0.07262133709357295, 0.07633051523169637, 0.07621142770042977, 0.07510664960660585, 0.07542950594437224, 0.074979005365163, 0.07623284922239254, 0.07352724830365737, 0.07215283120518858, 0.07354593667141833]
gdsc_100_gcsi_50=[0.07551328440870042, 0.07555979347359953, 0.07291226646880178, 0.07783726595656636, 0.07520761653020451, 0.07441034359729636, 0.07465773380659553, 0.07141927877197254, 0.074463966717382, 0.0737674855196596]

GDSC_100_gcsi.append(gdsc_100_gcsi_100)
GDSC_100_gcsi.append(gdsc_100_gcsi_70)
GDSC_100_gcsi.append(gdsc_100_gcsi_50)

##gCSI_100_gdsc

gcsi_100_gdsc_100= [0.07422984312659701, 0.07781167184036335, 0.07344452352241902, 0.07569255758520366, 0.07282042899428959, 0.07577278617354004, 0.07418072520647431, 0.07448581294071474, 0.07436118095289632, 0.07353982494341302]
gcsi_100_gdsc_70= [0.07422984312659701, 0.07781167184036335, 0.07344452352241902, 0.07569255758520366, 0.07282042899428959, 0.07577278617354004, 0.07418072520647431, 0.07448581294071474, 0.07436118095289632, 0.07353982494341302]
gcsi_100_gdsc_50= [0.07422984312659701, 0.07781167184036335, 0.07344452352241902, 0.07569255758520366, 0.07282042899428959, 0.07577278617354004, 0.07418072520647431, 0.07448581294071474, 0.07436118095289632, 0.07353982494341302]

gCSI_100_gdsc.append(gcsi_100_gdsc_100)
gCSI_100_gdsc.append(gcsi_100_gdsc_50)
gCSI_100_gdsc.append(gcsi_100_gdsc_50)

#CCLE-gCSI
##gcsi_100_ccle
gcsi_100_ccle_100= [0.08076638681943651, 0.08009623633548871, 0.08253400481769986, 0.08172976830797524, 0.08208964210266832, 0.08302400780745807, 0.08185721795653601, 0.08246301752944558, 0.0812317267071844, 0.08361645014185363]
gcsi_100_ccle_70= [0.0769679112448367, 0.0819601955333879, 0.08308814784683462, 0.08416734998057533, 0.07961021539600677, 0.07916104117765865, 0.07813163895660331, 0.0821260039499494, 0.08145327867657144, 0.08700967840710686]
gcsi_100_ccle_50= [0.07933772672194798, 0.07958035132238798, 0.08363267532602037, 0.07824747958767127, 0.07977492920603123, 0.08180560961766273, 0.0796903429072654, 0.0842752332043594, 0.08193922459696049, 0.08384132020761328]

gCSI_100_ccle.append(gcsi_100_ccle_100)
gCSI_100_ccle.append(gcsi_100_ccle_70)
gCSI_100_ccle.append(gcsi_100_ccle_50)


##ccle_100_gcsi
ccle_100_gcsi_100= [0.08076638681943651, 0.08009623633548871, 0.08253400481769986, 0.08172976830797524, 0.08208964210266832, 0.08302400780745807, 0.08185721795653601, 0.08246301752944558, 0.0812317267071844, 0.08361645014185363]

##filling with same data because 70% and 50% do not work
CCLE_100_gcsi.append(ccle_100_gcsi_100)
CCLE_100_gcsi.append(ccle_100_gcsi_100)
CCLE_100_gcsi.append(ccle_100_gcsi_100)

datasets={
        0:CCLE_100_gdsc,
        1:GDSC_100_ccle,
        2:GDSC_100_gcsi,
        3:gCSI_100_gdsc,
        4:gCSI_100_ccle,
        5:CCLE_100_gcsi,
        }


names={
        0:"CCLE-GDSC with changing GDSC",
        1:"CCLE-GDSC with changing CCLE",
        2:"GDSC-gCSI with changing gCSI",
        3:"GDSC-gCSI with changing GDSC",
        4:"gCSI-CCLE with changing CCLE",
        5:"gCSI-CCLE with changing gCSI",
        }

# import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Plot fonts
plot_fonts = {'font.family':'Arial',
               'font.size' : 14,
              'figure.figsize':(10,10),
    }

plt.rcParams.update(plot_fonts)

# plt.style.use('ggplot')
# plt.figure(figsize=(10,10))
plt.suptitle("MAE score comparison between different datasets",fontweight='bold')
for counter in range(len(datasets)):
    ax = plt.subplot(3, 2, counter + 1)
    main=ax.boxplot(datasets[counter], patch_artist=True, widths = 0.5)
    m = np.array(datasets[counter]).mean(axis=1)
    st = np.array(datasets[counter]).std(axis=1)
    ax.set_title(names[counter])
    # for i, line in enumerate(main['medians']):
    #     x, y = line.get_xydata()[1]
    #     text = ' μ={:.4f}\n σ={:.4f}'.format(m[i], st[i])
    #     ax.annotate(text, xy=(x, y))
        
        
    y_min = np.inf
    y_max = -np.inf
    for i, line in enumerate(main['whiskers']):
        x, y = line.get_xydata()[1]        
        y_min = np.min([y_min, y])
        y_max = np.max([y_max, y])
        if(i%2 == 0):
            text = ' μ={:.3f}\n σ={:.3f}'.format(m[int(i/2)], st[int(i/2)])
            ax.annotate(text, xy=(x, y-0.0045))
            
            
    ax.set_xticks([1, 2,3])
    ax.set_xticklabels(["1:1","1.5:1","2:1"], rotation=10)
    ax.set_ylim(y_min-0.005,y_max+0.005)
    ax.set_xlim(0.5,3.7)
    ax = plt.GridSpec(3, 2)
    ax.update(wspace=0.5, hspace=3)

    colors=["forestgreen", "blue", "dimgray"]
     
    plt.grid()
    for patch, color in zip(main['boxes'],colors):
        patch.set_facecolor(color)
plt.tight_layout()
plt.savefig('Mae_main_100.png')
plt.savefig('Das_Leveraging_MultiSource_Figure 4.png')
plt.savefig('Das_Leveraging_MultiSource_Figure 4.pdf')
plt.savefig('Das_Leveraging_MultiSource_Figure 4.svg')
plt.show()
